// Copyright 2019, OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package opentelemetry.proto.events.v1;

import "opentelemetry/proto/common/v1/common.proto";

option java_multiple_files = true;
option java_package = "io.opentelemetry.proto.events.v1";
option java_outer_classname = "EventsProto";

// Event is a time-stamped annotation of the span, consisting of user-supplied
// text description and key-value pairs.
message Event {
  // time_unixnano is the time the event occurred.
  fixed64 time_unixnano = 1;

  // description is a user-supplied text.
  string description = 2;

  // attributes is a collection of attribute key/value pairs on the event.
  repeated opentelemetry.proto.common.v1.AttributeKeyValue attributes = 3;

  // dropped_attributes_count is the number of dropped attributes. If the value is 0,
  // then no attributes were dropped.
  uint32 dropped_attributes_count = 4;
}

// The full details of a call stack.
message StackTrace {
  // A single stack frame in a stack trace.
  message StackFrame {
    // The fully-qualified name that uniquely identifies the function or
    // method that is active in this frame.
    string function_name = 1;
    // The name of the source file where the function call appears.
    string file_name = 3;
    // The line number in `file_name` where the function call appears.
    int64 line_number = 4;
    // The column number where the function call appears, if available.
    // This is important in JavaScript because of its anonymous functions.
    int64 column_number = 5;
    // The binary module from where the code was loaded.
    string load_module = 6;
    // The version of the deployed source code.
    string source_version = 7;
  }

  // Stack frames in this call stack.
  repeated StackFrame frames = 1;
  // The number of stack frames that were dropped because there
  // were too many stack frames.
  // If this value is 0, then no stack frames were dropped.
  int32 dropped_frames_count = 2;

  // The hash ID is used to conserve network bandwidth for duplicate
  // stack traces within a single trace.
  //
  // Often multiple spans will have identical stack traces.
  // The first occurrence of a stack trace should contain both
  // `stack_frames` and a value in `stack_trace_hash_id`.
  //
  // Subsequent spans within the same request can refer
  // to that stack trace by setting only `stack_trace_hash_id`.
  //
  uint64 stack_trace_hash_id = 3;
}